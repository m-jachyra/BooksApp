// <auto-generated />
using System;
using BooksApi.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BooksApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BooksApi.Models.Author", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AuthorName")
                        .HasColumnType("text");

                    b.Property<string>("Biography")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 3L,
                            AuthorName = "J. R. R. Tolkien",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1892, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeathDate = new DateTime(1973, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            AuthorName = "George R.R. Martin",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1948, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5L,
                            AuthorName = "Stephanie Meyer",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1973, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6L,
                            AuthorName = "J.K. Rowling",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7L,
                            AuthorName = "Remigiusz Mróz",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1987, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8L,
                            AuthorName = "Henryk Sienkiewicz",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1846, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeathDate = new DateTime(1916, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9L,
                            AuthorName = "Bolesław Prus",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1847, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeathDate = new DateTime(1912, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10L,
                            AuthorName = "Władysław Reymont",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1867, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeathDate = new DateTime(1925, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11L,
                            AuthorName = "Andrzej Sapkowski",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1948, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12L,
                            AuthorName = "Stephan King",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1947, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13L,
                            AuthorName = "E.L. James",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1963, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14L,
                            AuthorName = "Alicja Sinicka",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1987, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15L,
                            AuthorName = "William Shakespeare",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1564, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeathDate = new DateTime(1616, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16L,
                            AuthorName = "Juliusz Słowacki",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1809, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeathDate = new DateTime(1949, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17L,
                            AuthorName = "Olga Tokarczuk",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1962, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BooksApi.Models.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("GenreId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AuthorId = 3L,
                            Description = "Best book that was ever written.",
                            GenreId = 1L,
                            Title = "Lord of the rings"
                        },
                        new
                        {
                            Id = 4L,
                            AuthorId = 4L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 1L,
                            Title = "Game of Thrones"
                        },
                        new
                        {
                            Id = 5L,
                            AuthorId = 3L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 1L,
                            Title = "Hobbit"
                        },
                        new
                        {
                            Id = 6L,
                            AuthorId = 5L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 1L,
                            Title = "Twilight"
                        },
                        new
                        {
                            Id = 7L,
                            AuthorId = 6L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 1L,
                            Title = "Harry Potter"
                        },
                        new
                        {
                            Id = 8L,
                            AuthorId = 16L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 5L,
                            Title = "Balladyna"
                        },
                        new
                        {
                            Id = 9L,
                            AuthorId = 15L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 5L,
                            Title = "Król Lear"
                        },
                        new
                        {
                            Id = 10L,
                            AuthorId = 14L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 4L,
                            Title = "Oczy wilka"
                        },
                        new
                        {
                            Id = 11L,
                            AuthorId = 13L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 4L,
                            Title = "Fifty Shades of Grey"
                        },
                        new
                        {
                            Id = 12L,
                            AuthorId = 12L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 2L,
                            Title = "Smętarz dla zwierzaków"
                        },
                        new
                        {
                            Id = 13L,
                            AuthorId = 12L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 2L,
                            Title = "It"
                        },
                        new
                        {
                            Id = 14L,
                            AuthorId = 7L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 3L,
                            Title = "Halny"
                        },
                        new
                        {
                            Id = 15L,
                            AuthorId = 10L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 6L,
                            Title = "Chłopi"
                        },
                        new
                        {
                            Id = 16L,
                            AuthorId = 9L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 5L,
                            Title = "Lalka"
                        },
                        new
                        {
                            Id = 17L,
                            AuthorId = 8L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 6L,
                            Title = "Potop"
                        },
                        new
                        {
                            Id = 19L,
                            AuthorId = 17L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 7L,
                            Title = "Bieguni"
                        },
                        new
                        {
                            Id = 24L,
                            AuthorId = 11L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 1L,
                            Title = "Wiedźmin"
                        });
                });

            modelBuilder.Entity("BooksApi.Models.Genre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("GenreName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            GenreName = "Fantasy"
                        },
                        new
                        {
                            Id = 2L,
                            GenreName = "Horror"
                        },
                        new
                        {
                            Id = 3L,
                            GenreName = "Criminal"
                        },
                        new
                        {
                            Id = 4L,
                            GenreName = "Romance"
                        },
                        new
                        {
                            Id = 5L,
                            GenreName = "Drama"
                        },
                        new
                        {
                            Id = 6L,
                            GenreName = "Historic"
                        },
                        new
                        {
                            Id = 7L,
                            GenreName = "Slice of life"
                        });
                });

            modelBuilder.Entity("BooksApi.Models.Opinion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Rate")
                        .HasColumnType("boolean");

                    b.Property<long>("ReviewId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("Opinions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Rate = false,
                            ReviewId = 1L,
                            UserId = "23e1a0ef-4a8a-462a-8219-1d3a1169f417"
                        },
                        new
                        {
                            Id = 2L,
                            Rate = false,
                            ReviewId = 2L,
                            UserId = "593a9e65-5f4d-40b8-91f5-1813f577ce70"
                        },
                        new
                        {
                            Id = 3L,
                            Rate = false,
                            ReviewId = 5L,
                            UserId = "509de9d8-a3d5-47d9-a6b2-82c13c5dd216"
                        },
                        new
                        {
                            Id = 4L,
                            Rate = true,
                            ReviewId = 8L,
                            UserId = "e6f1d790-fa08-4db8-8958-4d8d171193d2"
                        },
                        new
                        {
                            Id = 5L,
                            Rate = true,
                            ReviewId = 4L,
                            UserId = "7b2e5361-9196-49f7-aa93-9c752fd63f19"
                        },
                        new
                        {
                            Id = 6L,
                            Rate = false,
                            ReviewId = 10L,
                            UserId = "1e6751b3-ecd8-4835-aee7-29274771601d"
                        },
                        new
                        {
                            Id = 7L,
                            Rate = false,
                            ReviewId = 5L,
                            UserId = "e32bdbc1-1892-4e41-9c69-6fcf8e40635c"
                        },
                        new
                        {
                            Id = 8L,
                            Rate = true,
                            ReviewId = 4L,
                            UserId = "bdf0715a-053f-4d3a-85e5-8013f853107e"
                        },
                        new
                        {
                            Id = 9L,
                            Rate = false,
                            ReviewId = 9L,
                            UserId = "fb5fad4f-130e-439a-a74d-e75432c8a5d7"
                        },
                        new
                        {
                            Id = 10L,
                            Rate = false,
                            ReviewId = 3L,
                            UserId = "1e1a1a16-3c37-467f-ac77-e83f3061edd3"
                        },
                        new
                        {
                            Id = 11L,
                            Rate = false,
                            ReviewId = 11L,
                            UserId = "1fe1d8b9-40b4-4d21-9ec3-747b25fe0316"
                        },
                        new
                        {
                            Id = 12L,
                            Rate = true,
                            ReviewId = 7L,
                            UserId = "0cf44c1c-6a00-4738-b33f-b662cf98cd7e"
                        },
                        new
                        {
                            Id = 13L,
                            Rate = false,
                            ReviewId = 12L,
                            UserId = "a6592ad5-0033-4d24-b5c7-b5ab43d81836"
                        },
                        new
                        {
                            Id = 14L,
                            Rate = false,
                            ReviewId = 13L,
                            UserId = "36e158e5-3731-4976-a13f-445fe61fdddd"
                        },
                        new
                        {
                            Id = 15L,
                            Rate = true,
                            ReviewId = 3L,
                            UserId = "4be99f35-6aa1-46b4-b0d0-2c0a6545a9e2"
                        },
                        new
                        {
                            Id = 16L,
                            Rate = true,
                            ReviewId = 7L,
                            UserId = "c907b3e5-3ebc-4bf0-a733-b01c75ba8d77"
                        },
                        new
                        {
                            Id = 17L,
                            Rate = false,
                            ReviewId = 3L,
                            UserId = "9c3d4bdf-a2eb-42f5-9b67-07facff0653d"
                        });
                });

            modelBuilder.Entity("BooksApi.Models.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiryOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text");

                    b.Property<DateTime>("RevokedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("BooksApi.Models.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BookId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BookId = 1L,
                            Content = "I think that is the best book ever written",
                            Rate = 10,
                            Title = "My favourite book",
                            UserId = "23e1a0ef-4a8a-462a-8219-1d3a1169f417"
                        },
                        new
                        {
                            Id = 2L,
                            BookId = 7L,
                            Content = "Gra oparta na tej książce, wygląda jakby w ogóle nie była przemyślana.",
                            Rate = 3,
                            Title = "Beznadziejna gra",
                            UserId = "593a9e65-5f4d-40b8-91f5-1813f577ce70"
                        },
                        new
                        {
                            Id = 3L,
                            BookId = 4L,
                            Content = "Bohaterowie tej książki są napisani w perfekcyjny sposób.",
                            Rate = 10,
                            Title = "Najlepsi bohaterowie",
                            UserId = "7b2e5361-9196-49f7-aa93-9c752fd63f19"
                        },
                        new
                        {
                            Id = 4L,
                            BookId = 13L,
                            Content = "Ulubiony bohater.",
                            Rate = 10,
                            Title = "Ulubiony bohater.",
                            UserId = "7493442e-646b-41d4-8aa8-8b764c12eb2c"
                        },
                        new
                        {
                            Id = 5L,
                            BookId = 11L,
                            Content = "Książka jest nudna i nieciekawa dla czytelnika",
                            Rate = 1,
                            Title = "Niezbyt dobra opinia",
                            UserId = "e6f1d790-fa08-4db8-8958-4d8d171193d2"
                        },
                        new
                        {
                            Id = 6L,
                            BookId = 8L,
                            Content = "W tej książce można rzenieść się w naprawdę magiczne miejsca i poznać prawdziwych bohaterów.",
                            Rate = 9,
                            Title = "Magiczne miejsce.",
                            UserId = "a6592ad5-0033-4d24-b5c7-b5ab43d81836"
                        },
                        new
                        {
                            Id = 7L,
                            BookId = 6L,
                            Content = "Z tej książki można naprawdę wiele się nauczyć.",
                            Rate = 8,
                            Title = "Cięte riosty.",
                            UserId = "c907b3e5-3ebc-4bf0-a733-b01c75ba8d77"
                        },
                        new
                        {
                            Id = 8L,
                            BookId = 9L,
                            Content = "Nie spodziewałam się, ze książka tej autorki może być tak dobra.",
                            Rate = 8,
                            Title = "Miła niespodzianka",
                            UserId = "1e1a1a16-3c37-467f-ac77-e83f3061edd3"
                        },
                        new
                        {
                            Id = 9L,
                            BookId = 16L,
                            Content = "Brakuje mi w tej książce prawdziwych zwrotów akcji.",
                            Rate = 5,
                            Title = "Zwroty akcji",
                            UserId = "509de9d8-a3d5-47d9-a6b2-82c13c5dd216"
                        },
                        new
                        {
                            Id = 10L,
                            BookId = 15L,
                            Content = "W tej książce mogą naprawdę odnaleźć się prawdziwi miłośnicy historii.",
                            Rate = 9,
                            Title = "Miłośnicy historii.",
                            UserId = "0cf44c1c-6a00-4738-b33f-b662cf98cd7e"
                        },
                        new
                        {
                            Id = 11L,
                            BookId = 10L,
                            Content = "Autor miał chyba ograniczoną wyobraźnię pisząć tę książkę.",
                            Rate = 2,
                            Title = "Możliwości wyobraźni",
                            UserId = "e32bdbc1-1892-4e41-9c69-6fcf8e40635c"
                        },
                        new
                        {
                            Id = 12L,
                            BookId = 12L,
                            Content = "Dzięki dokładnym opisą przyrody i otoczenia czytelnik może przenieść do świata powieśći.",
                            Rate = 8,
                            Title = "Moc słów.",
                            UserId = "e32bdbc1-1892-4e41-9c69-6fcf8e40635c"
                        },
                        new
                        {
                            Id = 13L,
                            BookId = 17L,
                            Content = "Żałuję, że ta książka się już skończyła,bo bardzo się w nią wciągnęłam.",
                            Rate = 9,
                            Title = "Tylko tyle?",
                            UserId = "509de9d8-a3d5-47d9-a6b2-82c13c5dd216"
                        },
                        new
                        {
                            Id = 14L,
                            BookId = 5L,
                            Content = "Ta seria książek trwa już za długo,mam nadzieję,że to ostatnia.",
                            Rate = 3,
                            Title = "Oby to już koniec.",
                            UserId = "c907b3e5-3ebc-4bf0-a733-b01c75ba8d77"
                        },
                        new
                        {
                            Id = 15L,
                            BookId = 5L,
                            Content = "Ta książka potrafi narawdę dobrze przestraszyć.",
                            Rate = 1,
                            Title = "Prawdziwy horror.",
                            UserId = "c907b3e5-3ebc-4bf0-a733-b01c75ba8d77"
                        },
                        new
                        {
                            Id = 16L,
                            BookId = 11L,
                            Content = "Książka, która trzyma tajemnice do samego końca i daje nieoczekiwane zwroty akcji to dobra książka.",
                            Rate = 10,
                            Title = "To niemożliwe.",
                            UserId = "e6f1d790-fa08-4db8-8958-4d8d171193d2"
                        },
                        new
                        {
                            Id = 17L,
                            BookId = 15L,
                            Content = "Myślałem, że przyadnie mita ksiązka do gustu, ale jednak się pomyliłem.",
                            Rate = 3,
                            Title = "To nie to.",
                            UserId = "7493442e-646b-41d4-8aa8-8b764c12eb2c"
                        });
                });

            modelBuilder.Entity("BooksApi.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "23e1a0ef-4a8a-462a-8219-1d3a1169f417",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a704323-39db-4943-9e86-eb9ecd0e731a",
                            Email = "stafano@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFANO@GMAIL.COM",
                            NormalizedUserName = "STEFFFANO1",
                            PasswordHash = "AQAAAAEAACcQAAAAEBNCR+jbb8jigGFQ349zwBu1oN1hBeuArEZJmpuAfgBRfotAqSa5yTQCeTeAT8lFWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b382af22-eddf-41bf-819b-83894f8f09d4",
                            TwoFactorEnabled = false,
                            UserName = "Stefffano1"
                        },
                        new
                        {
                            Id = "593a9e65-5f4d-40b8-91f5-1813f577ce70",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "187b7d47-5ad1-40ef-83df-6e3cc6d3756f",
                            Email = "martink@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTINK@GMAIL.COM",
                            NormalizedUserName = "MARTINX",
                            PasswordHash = "AQAAAAEAACcQAAAAEO5I9ooRw4GMKWEjVL7WZFxoGEintpC6N7GqiwIuRj8ay/rt6N8E0of7oDCAXGVrLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "481e6d0d-93a3-4f83-95d7-d71fe6e54393",
                            TwoFactorEnabled = false,
                            UserName = "Martinx"
                        },
                        new
                        {
                            Id = "509de9d8-a3d5-47d9-a6b2-82c13c5dd216",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d1488c0-fb07-45db-9b7c-979eff79283f",
                            Email = "mich@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MICH@GMAIL.COM",
                            NormalizedUserName = "MICHAELLLO",
                            PasswordHash = "AQAAAAEAACcQAAAAECDzE8qTpmY1UlTZ9nqwDFBIAune2ARalJNl2cSLm5Vs+xoQOD9Er7kkDjUeM0hWLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f18f157-3ab4-4c5f-911a-1ca2757f7f21",
                            TwoFactorEnabled = false,
                            UserName = "Michaelllo"
                        },
                        new
                        {
                            Id = "e6f1d790-fa08-4db8-8958-4d8d171193d2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ebc79bc-6c15-4d40-98d2-88432434ce5c",
                            Email = "a.one@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "A.ONE@GMAIL.COM",
                            NormalizedUserName = "ANNA",
                            PasswordHash = "AQAAAAEAACcQAAAAEHsaxYOAHlh/2fpRPEtOeOp8EIjrhfWEf4vZCbjjXIT4hVXvpAT85o0Ifv70oxC7Tg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97bcefba-051c-4f5b-a032-c1242878c359",
                            TwoFactorEnabled = false,
                            UserName = "Anna"
                        },
                        new
                        {
                            Id = "7b2e5361-9196-49f7-aa93-9c752fd63f19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c74a0f6e-a88e-40a5-929a-7060637bf7ac",
                            Email = "sara12@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SARA12@GMAIL.COM",
                            NormalizedUserName = "SARA12",
                            PasswordHash = "AQAAAAEAACcQAAAAENXAvfhyyQ1aVvtNYCcxGXkoMeb0K2IwMQV3n9miqs0NvBRmMwji1VimRuM1S57MBA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "832957f3-acbc-4e11-8ebb-07a9fb01597e",
                            TwoFactorEnabled = false,
                            UserName = "Sara12"
                        },
                        new
                        {
                            Id = "1e6751b3-ecd8-4835-aee7-29274771601d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "18fec5da-8909-4e36-aa85-1bd159a4bdde",
                            Email = "t.smith@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "T.SMITH@GMAIL.COM",
                            NormalizedUserName = "TIMIX",
                            PasswordHash = "AQAAAAEAACcQAAAAEL0fBl61Q9iWalIkdflBZZkRLwDyyitPYfr9Ua3KdGbxegav9esZ7g8jZYg1+CFwFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b793a728-3b75-4f95-a12e-c79e2c3f3aa4",
                            TwoFactorEnabled = false,
                            UserName = "Timix"
                        },
                        new
                        {
                            Id = "e32bdbc1-1892-4e41-9c69-6fcf8e40635c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d5a4e93-edae-4ae4-8354-ec11dde60cef",
                            Email = "norbi.m@gamil.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NORBI.M@GAMIL.COM",
                            NormalizedUserName = "NORBI",
                            PasswordHash = "AQAAAAEAACcQAAAAEH9MbBi+C9UuUAldpW8kiiEpGrRWUuSOQ3CKF7bH2SDK1f/REQttgFyrXCiQVOhiwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc41d885-c98d-44fe-bb26-feb7fb61a88f",
                            TwoFactorEnabled = false,
                            UserName = "Norbi"
                        },
                        new
                        {
                            Id = "7493442e-646b-41d4-8aa8-8b764c12eb2c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a83d8f0f-a107-457c-84be-c29ba6a996d0",
                            Email = "ewarak@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EWARAK@GMAIL.COM",
                            NormalizedUserName = "EWAAAA",
                            PasswordHash = "AQAAAAEAACcQAAAAEBOC05aEVERaB5oGeaLf+z71TJpI5t8BTmt1VOEiKyURYF/ySRu1UJZUC1Rs5TZw9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1064cb8e-14ac-403d-81f5-8fe30faf09c3",
                            TwoFactorEnabled = false,
                            UserName = "Ewaaaa"
                        },
                        new
                        {
                            Id = "4be99f35-6aa1-46b4-b0d0-2c0a6545a9e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a339b40-8502-4fa9-89f7-35dd5e2ac4a3",
                            Email = "j.fik@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "J.FIK@GMAIL.COM",
                            NormalizedUserName = "JANEK99",
                            PasswordHash = "AQAAAAEAACcQAAAAEJSRx+VvuXZsloUbS5Xs/w1pQv6IICnoigeaEINkElIpq1k9UycfsqoNRVG60AmSlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9cf69988-39b2-4aff-ab7d-fec1978b4d0d",
                            TwoFactorEnabled = false,
                            UserName = "Janek99"
                        },
                        new
                        {
                            Id = "a6592ad5-0033-4d24-b5c7-b5ab43d81836",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6086b367-b92b-4d31-a231-5711478a869d",
                            Email = "ewelina99@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EWELINA99@GMAIL.COM",
                            NormalizedUserName = "EWELCIA",
                            PasswordHash = "AQAAAAEAACcQAAAAEFRpExQSnfT9rhkooIMylOfivXUfOSj9q/YPD01D0eoLp5eVk0l5SQ7wVoGotJq5lQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3d6950e-be21-4bf3-9931-8494b44cc218",
                            TwoFactorEnabled = false,
                            UserName = "Ewelcia"
                        },
                        new
                        {
                            Id = "c907b3e5-3ebc-4bf0-a733-b01c75ba8d77",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5561a97-c2f1-48ff-9fbb-3eaf7ac61b27",
                            Email = "wiktoria@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WIKTORIA@GMAIL.COM",
                            NormalizedUserName = "WIKA",
                            PasswordHash = "AQAAAAEAACcQAAAAEA7dNq9dYmfYlO9fwarBM96RfrlM6FUtdhnpdAHZDuB/oF0TtHxm9C1GXaAotd9V2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4592ff4-8517-4b37-9e57-b64b48753b40",
                            TwoFactorEnabled = false,
                            UserName = "Wika"
                        },
                        new
                        {
                            Id = "0cf44c1c-6a00-4738-b33f-b662cf98cd7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cabfa7af-7923-4576-b7ed-15238c355f47",
                            Email = "rzeka.magda@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RZEKA.MAGDA@GMAIL.COM",
                            NormalizedUserName = "MADZIX",
                            PasswordHash = "AQAAAAEAACcQAAAAEG5L2jFN2ieMFq1vz5+ViOZzMjBBmKN9oqD+tSgzo+Gs3h4BI8EQf6PAJqz4hddzmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7453046-def5-403b-b02b-bd98e0bb1cfc",
                            TwoFactorEnabled = false,
                            UserName = "Madzix"
                        },
                        new
                        {
                            Id = "1e1a1a16-3c37-467f-ac77-e83f3061edd3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "159b17f7-5225-4624-8a09-970038ba4cf5",
                            Email = "w.wrak@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "W.WRAK@GMAIL.COM",
                            NormalizedUserName = "WERCIA",
                            PasswordHash = "AQAAAAEAACcQAAAAELufaCMXl3gaku2lGOZUpGejOY3C/Af7hX2rF2G04lLVG88OIOWWQWiCLDFz0wtC5A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2d86e9b-56c3-4a29-a5d9-5aebaf1fa98c",
                            TwoFactorEnabled = false,
                            UserName = "Wercia"
                        },
                        new
                        {
                            Id = "1fe1d8b9-40b4-4d21-9ec3-747b25fe0316",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be6063ca-a880-4060-9aa3-fcd577d0bea2",
                            Email = "marcinp@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARCINP@GMAIL.COM",
                            NormalizedUserName = "PANMARCIN",
                            PasswordHash = "AQAAAAEAACcQAAAAENG61JlbqYVlpkdEJjRVNFjC1mFE+1lKmtLB/vL/8SwI7CGWlxLTi3p2NjkmSjBqvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea3e965b-428e-4bcf-90c0-e043a3cbfc40",
                            TwoFactorEnabled = false,
                            UserName = "PanMarcin"
                        },
                        new
                        {
                            Id = "fb5fad4f-130e-439a-a74d-e75432c8a5d7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11fc7411-f535-4313-a845-dc4e5be601c2",
                            Email = "znawca@gamil.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ZNAWCA@GAMIL.COM",
                            NormalizedUserName = "ZNAWCA",
                            PasswordHash = "AQAAAAEAACcQAAAAEBxYusOEQYOcOu0Xq7ILIYju8iOzYKIIoFG7GmeGaOsrwc02ILfzYONYUKG9bjsBDA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6723cf4-440d-49bf-87db-39097eb5ae24",
                            TwoFactorEnabled = false,
                            UserName = "Znawca"
                        },
                        new
                        {
                            Id = "bdf0715a-053f-4d3a-85e5-8013f853107e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93493796-3256-4ed5-b0b4-d23def9501c3",
                            Email = "mirkow@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MIRKOW@GMAIL.COM",
                            NormalizedUserName = "MIREK123",
                            PasswordHash = "AQAAAAEAACcQAAAAEL0TD1w0LSHAiOSDCEZONNUPsbA2oPgj0vl6Ek5pvqe2K//IPIClfh9zh8wcqunBow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f3f04872-039b-42e2-aa3d-a63aebff1542",
                            TwoFactorEnabled = false,
                            UserName = "mirek123"
                        },
                        new
                        {
                            Id = "9c3d4bdf-a2eb-42f5-9b67-07facff0653d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13834f7b-21be-49a2-bd5c-e88672d10138",
                            Email = "enowak@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ENOWAK@GMAIL.COM",
                            NormalizedUserName = "EMILKA",
                            PasswordHash = "AQAAAAEAACcQAAAAEOhoahz/fsN5IWizlhMhOntZuRLwLNsg84PE2QQWI2dKQNFQqygtxDjX0jy/mSo4LQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e0e1d81-8f72-4e85-81d8-8dd91883d023",
                            TwoFactorEnabled = false,
                            UserName = "Emilka"
                        },
                        new
                        {
                            Id = "36e158e5-3731-4976-a13f-445fe61fdddd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3402916-90ae-4518-a27a-d96a3a16b261",
                            Email = "jk@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JK@GMAIL.COM",
                            NormalizedUserName = "JK",
                            PasswordHash = "AQAAAAEAACcQAAAAEDvHtSG33pC9UyUDs24JB1HqD1vvuYPmUkLSTrGa/ZUMWjqmNo7azkW+iabf9maZqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30d51cd9-8b15-4849-84ef-2d115767938c",
                            TwoFactorEnabled = false,
                            UserName = "JK"
                        },
                        new
                        {
                            Id = "f2bb93f0-3f5b-4918-9462-1d5ba0059ab4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ba808bf-8095-426f-88e5-4cdd45037483",
                            Email = "znowakowska@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ZNOWAKOWSKA@GMAIL.COM",
                            NormalizedUserName = "ZOSIAA1",
                            PasswordHash = "AQAAAAEAACcQAAAAEAIpD6j7UwcWLBoD7iJMEtrAjXQWSivyyQmbqGR3CC9n2ebZ58Y32Xeqpemzh0+nAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85f911f9-dae6-498e-ac3d-478d6a2c69fe",
                            TwoFactorEnabled = false,
                            UserName = "Zosiaa1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "059e5df3-8035-4d0d-8a78-ad043ab5d5ba",
                            ConcurrencyStamp = "aa244d2f-ab96-4d10-89cc-853660ce5f10",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d9187272-b557-41b4-a976-04ad0cb5cf5f",
                            ConcurrencyStamp = "f290d7f7-a0a4-4f81-bb39-fa556cb5cef4",
                            Name = "Default",
                            NormalizedName = "DEFAULT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "23e1a0ef-4a8a-462a-8219-1d3a1169f417",
                            RoleId = "059e5df3-8035-4d0d-8a78-ad043ab5d5ba"
                        },
                        new
                        {
                            UserId = "593a9e65-5f4d-40b8-91f5-1813f577ce70",
                            RoleId = "d9187272-b557-41b4-a976-04ad0cb5cf5f"
                        },
                        new
                        {
                            UserId = "509de9d8-a3d5-47d9-a6b2-82c13c5dd216",
                            RoleId = "d9187272-b557-41b4-a976-04ad0cb5cf5f"
                        },
                        new
                        {
                            UserId = "e6f1d790-fa08-4db8-8958-4d8d171193d2",
                            RoleId = "d9187272-b557-41b4-a976-04ad0cb5cf5f"
                        },
                        new
                        {
                            UserId = "7b2e5361-9196-49f7-aa93-9c752fd63f19",
                            RoleId = "d9187272-b557-41b4-a976-04ad0cb5cf5f"
                        },
                        new
                        {
                            UserId = "1e6751b3-ecd8-4835-aee7-29274771601d",
                            RoleId = "d9187272-b557-41b4-a976-04ad0cb5cf5f"
                        },
                        new
                        {
                            UserId = "e32bdbc1-1892-4e41-9c69-6fcf8e40635c",
                            RoleId = "d9187272-b557-41b4-a976-04ad0cb5cf5f"
                        },
                        new
                        {
                            UserId = "7493442e-646b-41d4-8aa8-8b764c12eb2c",
                            RoleId = "d9187272-b557-41b4-a976-04ad0cb5cf5f"
                        },
                        new
                        {
                            UserId = "4be99f35-6aa1-46b4-b0d0-2c0a6545a9e2",
                            RoleId = "d9187272-b557-41b4-a976-04ad0cb5cf5f"
                        },
                        new
                        {
                            UserId = "a6592ad5-0033-4d24-b5c7-b5ab43d81836",
                            RoleId = "d9187272-b557-41b4-a976-04ad0cb5cf5f"
                        },
                        new
                        {
                            UserId = "c907b3e5-3ebc-4bf0-a733-b01c75ba8d77",
                            RoleId = "d9187272-b557-41b4-a976-04ad0cb5cf5f"
                        },
                        new
                        {
                            UserId = "0cf44c1c-6a00-4738-b33f-b662cf98cd7e",
                            RoleId = "d9187272-b557-41b4-a976-04ad0cb5cf5f"
                        },
                        new
                        {
                            UserId = "1e1a1a16-3c37-467f-ac77-e83f3061edd3",
                            RoleId = "d9187272-b557-41b4-a976-04ad0cb5cf5f"
                        },
                        new
                        {
                            UserId = "1fe1d8b9-40b4-4d21-9ec3-747b25fe0316",
                            RoleId = "d9187272-b557-41b4-a976-04ad0cb5cf5f"
                        },
                        new
                        {
                            UserId = "fb5fad4f-130e-439a-a74d-e75432c8a5d7",
                            RoleId = "d9187272-b557-41b4-a976-04ad0cb5cf5f"
                        },
                        new
                        {
                            UserId = "bdf0715a-053f-4d3a-85e5-8013f853107e",
                            RoleId = "d9187272-b557-41b4-a976-04ad0cb5cf5f"
                        },
                        new
                        {
                            UserId = "9c3d4bdf-a2eb-42f5-9b67-07facff0653d",
                            RoleId = "d9187272-b557-41b4-a976-04ad0cb5cf5f"
                        },
                        new
                        {
                            UserId = "36e158e5-3731-4976-a13f-445fe61fdddd",
                            RoleId = "d9187272-b557-41b4-a976-04ad0cb5cf5f"
                        },
                        new
                        {
                            UserId = "f2bb93f0-3f5b-4918-9462-1d5ba0059ab4",
                            RoleId = "d9187272-b557-41b4-a976-04ad0cb5cf5f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BooksApi.Models.Book", b =>
                {
                    b.HasOne("BooksApi.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooksApi.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BooksApi.Models.Opinion", b =>
                {
                    b.HasOne("BooksApi.Models.Review", "Review")
                        .WithMany("ReviewOpinions")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooksApi.Models.User", "User")
                        .WithMany("ReviewOpinions")
                        .HasForeignKey("UserId");

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BooksApi.Models.RefreshToken", b =>
                {
                    b.HasOne("BooksApi.Models.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BooksApi.Models.Review", b =>
                {
                    b.HasOne("BooksApi.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooksApi.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BooksApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BooksApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooksApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BooksApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BooksApi.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BooksApi.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BooksApi.Models.Review", b =>
                {
                    b.Navigation("ReviewOpinions");
                });

            modelBuilder.Entity("BooksApi.Models.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("ReviewOpinions");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
