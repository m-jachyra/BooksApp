// <auto-generated />
using System;
using BooksApi.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BooksApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220128123403_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BooksApi.Models.Author", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AuthorName")
                        .HasColumnType("text")
                        .HasColumnName("author_name");

                    b.Property<string>("Biography")
                        .HasColumnType("text")
                        .HasColumnName("biography");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birth_date");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("death_date");

                    b.HasKey("Id")
                        .HasName("pk_authors");

                    b.ToTable("authors");

                    b.HasData(
                        new
                        {
                            Id = 3L,
                            AuthorName = "J. R. R. Tolkien",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1892, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeathDate = new DateTime(1973, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            AuthorName = "George R.R. Martin",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1948, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5L,
                            AuthorName = "Stephanie Meyer",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1973, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6L,
                            AuthorName = "J.K. Rowling",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7L,
                            AuthorName = "Remigiusz Mróz",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1987, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8L,
                            AuthorName = "Henryk Sienkiewicz",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1846, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeathDate = new DateTime(1916, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9L,
                            AuthorName = "Bolesław Prus",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1847, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeathDate = new DateTime(1912, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10L,
                            AuthorName = "Władysław Reymont",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1867, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeathDate = new DateTime(1925, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11L,
                            AuthorName = "Andrzej Sapkowski",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1948, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12L,
                            AuthorName = "Stephan King",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1947, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13L,
                            AuthorName = "E.L. James",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1963, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14L,
                            AuthorName = "Alicja Sinicka",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1987, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15L,
                            AuthorName = "William Shakespeare",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1564, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeathDate = new DateTime(1616, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16L,
                            AuthorName = "Juliusz Słowacki",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1809, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeathDate = new DateTime(1949, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17L,
                            AuthorName = "Olga Tokarczuk",
                            Biography = "Lorem Ipsum Dolor Sit Amet",
                            BirthDate = new DateTime(1962, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BooksApi.Models.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("GenreId")
                        .HasColumnType("bigint")
                        .HasColumnName("genre_id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_books_author_id");

                    b.HasIndex("GenreId")
                        .HasDatabaseName("ix_books_genre_id");

                    b.ToTable("books");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AuthorId = 3L,
                            Description = "Best book that was ever written.",
                            GenreId = 1L,
                            Title = "Lord of the rings"
                        },
                        new
                        {
                            Id = 4L,
                            AuthorId = 4L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 1L,
                            Title = "Game of Thrones"
                        },
                        new
                        {
                            Id = 5L,
                            AuthorId = 3L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 1L,
                            Title = "Hobbit"
                        },
                        new
                        {
                            Id = 6L,
                            AuthorId = 5L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 1L,
                            Title = "Twilight"
                        },
                        new
                        {
                            Id = 7L,
                            AuthorId = 6L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 1L,
                            Title = "Harry Potter"
                        },
                        new
                        {
                            Id = 8L,
                            AuthorId = 16L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 5L,
                            Title = "Balladyna"
                        },
                        new
                        {
                            Id = 9L,
                            AuthorId = 15L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 5L,
                            Title = "Król Lear"
                        },
                        new
                        {
                            Id = 10L,
                            AuthorId = 14L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 4L,
                            Title = "Oczy wilka"
                        },
                        new
                        {
                            Id = 11L,
                            AuthorId = 13L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 4L,
                            Title = "Fifty Shades of Grey"
                        },
                        new
                        {
                            Id = 12L,
                            AuthorId = 12L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 2L,
                            Title = "Smętarz dla zwierzaków"
                        },
                        new
                        {
                            Id = 13L,
                            AuthorId = 12L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 2L,
                            Title = "It"
                        },
                        new
                        {
                            Id = 14L,
                            AuthorId = 7L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 3L,
                            Title = "Halny"
                        },
                        new
                        {
                            Id = 15L,
                            AuthorId = 10L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 6L,
                            Title = "Chłopi"
                        },
                        new
                        {
                            Id = 16L,
                            AuthorId = 9L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 5L,
                            Title = "Lalka"
                        },
                        new
                        {
                            Id = 17L,
                            AuthorId = 8L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 6L,
                            Title = "Potop"
                        },
                        new
                        {
                            Id = 19L,
                            AuthorId = 17L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 7L,
                            Title = "Bieguni"
                        },
                        new
                        {
                            Id = 24L,
                            AuthorId = 11L,
                            Description = "Lorem Ipsum Dolor Sit Amet",
                            GenreId = 1L,
                            Title = "Wiedźmin"
                        });
                });

            modelBuilder.Entity("BooksApi.Models.Genre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("GenreName")
                        .HasColumnType("text")
                        .HasColumnName("genre_name");

                    b.HasKey("Id")
                        .HasName("pk_genres");

                    b.ToTable("genres");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            GenreName = "Fantasy"
                        },
                        new
                        {
                            Id = 2L,
                            GenreName = "Horror"
                        },
                        new
                        {
                            Id = 3L,
                            GenreName = "Criminal"
                        },
                        new
                        {
                            Id = 4L,
                            GenreName = "Romance"
                        },
                        new
                        {
                            Id = 5L,
                            GenreName = "Drama"
                        },
                        new
                        {
                            Id = 6L,
                            GenreName = "Historic"
                        },
                        new
                        {
                            Id = 7L,
                            GenreName = "Slice of life"
                        });
                });

            modelBuilder.Entity("BooksApi.Models.Opinion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Rate")
                        .HasColumnType("boolean")
                        .HasColumnName("rate");

                    b.Property<long>("ReviewId")
                        .HasColumnType("bigint")
                        .HasColumnName("review_id");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_opinions");

                    b.HasIndex("ReviewId")
                        .HasDatabaseName("ix_opinions_review_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_opinions_user_id");

                    b.ToTable("opinions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Rate = false,
                            ReviewId = 1L,
                            UserId = "23e1a0ef-4a8a-462a-8219-1d3a1169f417"
                        },
                        new
                        {
                            Id = 2L,
                            Rate = false,
                            ReviewId = 2L,
                            UserId = "593a9e65-5f4d-40b8-91f5-1813f577ce70"
                        },
                        new
                        {
                            Id = 3L,
                            Rate = false,
                            ReviewId = 5L,
                            UserId = "509de9d8-a3d5-47d9-a6b2-82c13c5dd216"
                        },
                        new
                        {
                            Id = 4L,
                            Rate = true,
                            ReviewId = 8L,
                            UserId = "e6f1d790-fa08-4db8-8958-4d8d171193d2"
                        },
                        new
                        {
                            Id = 5L,
                            Rate = true,
                            ReviewId = 4L,
                            UserId = "7b2e5361-9196-49f7-aa93-9c752fd63f19"
                        },
                        new
                        {
                            Id = 6L,
                            Rate = false,
                            ReviewId = 10L,
                            UserId = "1e6751b3-ecd8-4835-aee7-29274771601d"
                        },
                        new
                        {
                            Id = 7L,
                            Rate = false,
                            ReviewId = 5L,
                            UserId = "e32bdbc1-1892-4e41-9c69-6fcf8e40635c"
                        },
                        new
                        {
                            Id = 8L,
                            Rate = true,
                            ReviewId = 4L,
                            UserId = "bdf0715a-053f-4d3a-85e5-8013f853107e"
                        },
                        new
                        {
                            Id = 9L,
                            Rate = false,
                            ReviewId = 9L,
                            UserId = "fb5fad4f-130e-439a-a74d-e75432c8a5d7"
                        },
                        new
                        {
                            Id = 10L,
                            Rate = false,
                            ReviewId = 3L,
                            UserId = "1e1a1a16-3c37-467f-ac77-e83f3061edd3"
                        },
                        new
                        {
                            Id = 11L,
                            Rate = false,
                            ReviewId = 11L,
                            UserId = "1fe1d8b9-40b4-4d21-9ec3-747b25fe0316"
                        },
                        new
                        {
                            Id = 12L,
                            Rate = true,
                            ReviewId = 7L,
                            UserId = "0cf44c1c-6a00-4738-b33f-b662cf98cd7e"
                        },
                        new
                        {
                            Id = 13L,
                            Rate = false,
                            ReviewId = 12L,
                            UserId = "a6592ad5-0033-4d24-b5c7-b5ab43d81836"
                        },
                        new
                        {
                            Id = 14L,
                            Rate = false,
                            ReviewId = 13L,
                            UserId = "36e158e5-3731-4976-a13f-445fe61fdddd"
                        },
                        new
                        {
                            Id = 15L,
                            Rate = true,
                            ReviewId = 3L,
                            UserId = "4be99f35-6aa1-46b4-b0d0-2c0a6545a9e2"
                        },
                        new
                        {
                            Id = 16L,
                            Rate = true,
                            ReviewId = 7L,
                            UserId = "c907b3e5-3ebc-4bf0-a733-b01c75ba8d77"
                        },
                        new
                        {
                            Id = 17L,
                            Rate = false,
                            ReviewId = 3L,
                            UserId = "9c3d4bdf-a2eb-42f5-9b67-07facff0653d"
                        });
                });

            modelBuilder.Entity("BooksApi.Models.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("ExpiryOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiry_on");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text")
                        .HasColumnName("revoked_by_ip");

                    b.Property<DateTime>("RevokedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("revoked_on");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens");
                });

            modelBuilder.Entity("BooksApi.Models.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<int>("Rate")
                        .HasColumnType("integer")
                        .HasColumnName("rate");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_reviews_book_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reviews_user_id");

                    b.ToTable("reviews");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BookId = 1L,
                            Content = "I think that is the best book ever written",
                            Rate = 10,
                            Title = "My favourite book",
                            UserId = "23e1a0ef-4a8a-462a-8219-1d3a1169f417"
                        },
                        new
                        {
                            Id = 2L,
                            BookId = 7L,
                            Content = "Gra oparta na tej książce, wygląda jakby w ogóle nie była przemyślana.",
                            Rate = 3,
                            Title = "Beznadziejna gra",
                            UserId = "593a9e65-5f4d-40b8-91f5-1813f577ce70"
                        },
                        new
                        {
                            Id = 3L,
                            BookId = 4L,
                            Content = "Bohaterowie tej książki są napisani w perfekcyjny sposób.",
                            Rate = 10,
                            Title = "Najlepsi bohaterowie",
                            UserId = "7b2e5361-9196-49f7-aa93-9c752fd63f19"
                        },
                        new
                        {
                            Id = 4L,
                            BookId = 13L,
                            Content = "Ulubiony bohater.",
                            Rate = 10,
                            Title = "Ulubiony bohater.",
                            UserId = "7493442e-646b-41d4-8aa8-8b764c12eb2c"
                        },
                        new
                        {
                            Id = 5L,
                            BookId = 11L,
                            Content = "Książka jest nudna i nieciekawa dla czytelnika",
                            Rate = 1,
                            Title = "Niezbyt dobra opinia",
                            UserId = "e6f1d790-fa08-4db8-8958-4d8d171193d2"
                        },
                        new
                        {
                            Id = 6L,
                            BookId = 8L,
                            Content = "W tej książce można rzenieść się w naprawdę magiczne miejsca i poznać prawdziwych bohaterów.",
                            Rate = 9,
                            Title = "Magiczne miejsce.",
                            UserId = "a6592ad5-0033-4d24-b5c7-b5ab43d81836"
                        },
                        new
                        {
                            Id = 7L,
                            BookId = 6L,
                            Content = "Z tej książki można naprawdę wiele się nauczyć.",
                            Rate = 8,
                            Title = "Cięte riosty.",
                            UserId = "c907b3e5-3ebc-4bf0-a733-b01c75ba8d77"
                        },
                        new
                        {
                            Id = 8L,
                            BookId = 9L,
                            Content = "Nie spodziewałam się, ze książka tej autorki może być tak dobra.",
                            Rate = 8,
                            Title = "Miła niespodzianka",
                            UserId = "1e1a1a16-3c37-467f-ac77-e83f3061edd3"
                        },
                        new
                        {
                            Id = 9L,
                            BookId = 16L,
                            Content = "Brakuje mi w tej książce prawdziwych zwrotów akcji.",
                            Rate = 5,
                            Title = "Zwroty akcji",
                            UserId = "509de9d8-a3d5-47d9-a6b2-82c13c5dd216"
                        },
                        new
                        {
                            Id = 10L,
                            BookId = 15L,
                            Content = "W tej książce mogą naprawdę odnaleźć się prawdziwi miłośnicy historii.",
                            Rate = 9,
                            Title = "Miłośnicy historii.",
                            UserId = "0cf44c1c-6a00-4738-b33f-b662cf98cd7e"
                        },
                        new
                        {
                            Id = 11L,
                            BookId = 10L,
                            Content = "Autor miał chyba ograniczoną wyobraźnię pisząć tę książkę.",
                            Rate = 2,
                            Title = "Możliwości wyobraźni",
                            UserId = "e32bdbc1-1892-4e41-9c69-6fcf8e40635c"
                        },
                        new
                        {
                            Id = 12L,
                            BookId = 12L,
                            Content = "Dzięki dokładnym opisą przyrody i otoczenia czytelnik może przenieść do świata powieśći.",
                            Rate = 8,
                            Title = "Moc słów.",
                            UserId = "e32bdbc1-1892-4e41-9c69-6fcf8e40635c"
                        },
                        new
                        {
                            Id = 13L,
                            BookId = 17L,
                            Content = "Żałuję, że ta książka się już skończyła,bo bardzo się w nią wciągnęłam.",
                            Rate = 9,
                            Title = "Tylko tyle?",
                            UserId = "509de9d8-a3d5-47d9-a6b2-82c13c5dd216"
                        },
                        new
                        {
                            Id = 14L,
                            BookId = 5L,
                            Content = "Ta seria książek trwa już za długo,mam nadzieję,że to ostatnia.",
                            Rate = 3,
                            Title = "Oby to już koniec.",
                            UserId = "c907b3e5-3ebc-4bf0-a733-b01c75ba8d77"
                        },
                        new
                        {
                            Id = 15L,
                            BookId = 5L,
                            Content = "Ta książka potrafi narawdę dobrze przestraszyć.",
                            Rate = 1,
                            Title = "Prawdziwy horror.",
                            UserId = "c907b3e5-3ebc-4bf0-a733-b01c75ba8d77"
                        },
                        new
                        {
                            Id = 16L,
                            BookId = 11L,
                            Content = "Książka, która trzyma tajemnice do samego końca i daje nieoczekiwane zwroty akcji to dobra książka.",
                            Rate = 10,
                            Title = "To niemożliwe.",
                            UserId = "e6f1d790-fa08-4db8-8958-4d8d171193d2"
                        },
                        new
                        {
                            Id = 17L,
                            BookId = 15L,
                            Content = "Myślałem, że przyadnie mita ksiązka do gustu, ale jednak się pomyliłem.",
                            Rate = 3,
                            Title = "To nie to.",
                            UserId = "7493442e-646b-41d4-8aa8-8b764c12eb2c"
                        });
                });

            modelBuilder.Entity("BooksApi.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "23e1a0ef-4a8a-462a-8219-1d3a1169f417",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27527afe-597c-4168-b9c2-f4f3647be4bb",
                            Email = "stafano@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFANO@GMAIL.COM",
                            NormalizedUserName = "STEFFFANO1",
                            PasswordHash = "AQAAAAEAACcQAAAAEFn8DM+2v/OXyw1Q09NQSY2fuob11fORhffAxP494JDwRBSzgn7O2LyCFgnz18aJMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eaf4a1da-81c5-4f78-a675-fff0cfe673b0",
                            TwoFactorEnabled = false,
                            UserName = "Stefffano1"
                        },
                        new
                        {
                            Id = "593a9e65-5f4d-40b8-91f5-1813f577ce70",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f32f51cb-457e-43d1-9332-4eb5b63bb011",
                            Email = "martink@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTINK@GMAIL.COM",
                            NormalizedUserName = "MARTINX",
                            PasswordHash = "AQAAAAEAACcQAAAAEJCdpr6gxYM+5a71VKXL3KkytAellVUBEOb/zKcd51hf+iknkojq98o+3f4vvQzRJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ab0ad70-5130-482a-9614-4e4e139442aa",
                            TwoFactorEnabled = false,
                            UserName = "Martinx"
                        },
                        new
                        {
                            Id = "509de9d8-a3d5-47d9-a6b2-82c13c5dd216",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75257521-91e3-4b3d-9baa-9563d63a34ff",
                            Email = "mich@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MICH@GMAIL.COM",
                            NormalizedUserName = "MICHAELLLO",
                            PasswordHash = "AQAAAAEAACcQAAAAEDuCbugX2jqGb0mGC19HICtu136TxedTbTrAuzi6APTw6KKzOHSdbFV+qZcolWNDGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f0e80ff-c8fc-44b4-af0b-b33ce9635998",
                            TwoFactorEnabled = false,
                            UserName = "Michaelllo"
                        },
                        new
                        {
                            Id = "e6f1d790-fa08-4db8-8958-4d8d171193d2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22e18ba4-4f92-47ac-adc0-12a927b4dfb5",
                            Email = "a.one@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "A.ONE@GMAIL.COM",
                            NormalizedUserName = "ANNA",
                            PasswordHash = "AQAAAAEAACcQAAAAEHV8KUWC7A4VREnUKJzo9ylHARgTUkVlykOfrnyow3rNkVno5gSIGvt9et9ygbYwrw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "069ae22b-9a07-4c51-97e3-75048773de71",
                            TwoFactorEnabled = false,
                            UserName = "Anna"
                        },
                        new
                        {
                            Id = "7b2e5361-9196-49f7-aa93-9c752fd63f19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09dc51ea-410b-438d-bb29-a0bf5ad34053",
                            Email = "sara12@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SARA12@GMAIL.COM",
                            NormalizedUserName = "SARA12",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaUwvMC1isLzF72LW3mHv/Cf2mrR2h6+ZZHPu8fAzZNchgiBolu6lnmrB8RiJrDnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "792b914e-6807-4193-a822-2791231d66eb",
                            TwoFactorEnabled = false,
                            UserName = "Sara12"
                        },
                        new
                        {
                            Id = "1e6751b3-ecd8-4835-aee7-29274771601d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "def66562-abb7-414f-934b-ed3c2737cdd9",
                            Email = "t.smith@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "T.SMITH@GMAIL.COM",
                            NormalizedUserName = "TIMIX",
                            PasswordHash = "AQAAAAEAACcQAAAAEHbGGAE3QPUcqqGSFZ9NyJw9CKEWbTUlxbr2Jym3QtXxYpvCKvOd9hySwaqJHCTP0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0401aa18-0ac7-4982-ba58-cf437dff6beb",
                            TwoFactorEnabled = false,
                            UserName = "Timix"
                        },
                        new
                        {
                            Id = "e32bdbc1-1892-4e41-9c69-6fcf8e40635c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c0fca701-c08f-4038-acc9-ce5218e606d0",
                            Email = "norbi.m@gamil.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NORBI.M@GAMIL.COM",
                            NormalizedUserName = "NORBI",
                            PasswordHash = "AQAAAAEAACcQAAAAEMbYo6toxQgijBT7Co8Or6PtPF8HqE2mYBIBAhs6O8XaI3LlvYCMgcVKfifsspcdCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "049e1d8f-b1db-451b-b7c1-471117770d1c",
                            TwoFactorEnabled = false,
                            UserName = "Norbi"
                        },
                        new
                        {
                            Id = "7493442e-646b-41d4-8aa8-8b764c12eb2c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "022d5d06-4643-4289-8975-010e1f90dd15",
                            Email = "ewarak@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EWARAK@GMAIL.COM",
                            NormalizedUserName = "EWAAAA",
                            PasswordHash = "AQAAAAEAACcQAAAAEISYocpoScEDzRw5bKmvjH7arL8IEwG+AC27t8uuW/My8my41aIYQGGq/8hZR56WoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb096deb-7aac-42c8-a368-634ff6b96700",
                            TwoFactorEnabled = false,
                            UserName = "Ewaaaa"
                        },
                        new
                        {
                            Id = "4be99f35-6aa1-46b4-b0d0-2c0a6545a9e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5abaedc-f8e3-4fd0-a9e3-7ff0977d1285",
                            Email = "j.fik@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "J.FIK@GMAIL.COM",
                            NormalizedUserName = "JANEK99",
                            PasswordHash = "AQAAAAEAACcQAAAAEPkvkfuimMOIIClkAQ6VG4RZqT8Pg2G45GK/wb/luHmyB73TGg3T2o4K3/YGTTXlpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "02215d43-acba-400b-810e-8f04cdc35eab",
                            TwoFactorEnabled = false,
                            UserName = "Janek99"
                        },
                        new
                        {
                            Id = "a6592ad5-0033-4d24-b5c7-b5ab43d81836",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e733f4b-a9d9-4daa-b783-cfcca6ed37e8",
                            Email = "ewelina99@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EWELINA99@GMAIL.COM",
                            NormalizedUserName = "EWELCIA",
                            PasswordHash = "AQAAAAEAACcQAAAAEJHN3GRxDq8Sv1olTMUrpgFr6Jl8Fq9rMvxAFbNL9oE0GHrnye7uFpaKr3TjNif3Hw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4bc0b75-62e9-41a2-9623-a08ad9c978c4",
                            TwoFactorEnabled = false,
                            UserName = "Ewelcia"
                        },
                        new
                        {
                            Id = "c907b3e5-3ebc-4bf0-a733-b01c75ba8d77",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d427e04-ffba-445b-b4c4-ee892535fef0",
                            Email = "wiktoria@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WIKTORIA@GMAIL.COM",
                            NormalizedUserName = "WIKA",
                            PasswordHash = "AQAAAAEAACcQAAAAEJsLzEGp56jZj5JQJnfKvRsAr9qz6igL7sUSTMgwegcnv6B07n3uLrYmKEOTqJ7EoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc33d9a4-3245-49b6-bb93-aa467fdb340a",
                            TwoFactorEnabled = false,
                            UserName = "Wika"
                        },
                        new
                        {
                            Id = "0cf44c1c-6a00-4738-b33f-b662cf98cd7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "223d8eb4-ff33-43d7-a600-9b937a139f24",
                            Email = "rzeka.magda@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RZEKA.MAGDA@GMAIL.COM",
                            NormalizedUserName = "MADZIX",
                            PasswordHash = "AQAAAAEAACcQAAAAEBjCyCLzQ0t3jO+DtygEYc7C9aZSfrn38le2qagOQyAHirFIUrKgk2O1HO8iW4snSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "34f8855b-4418-4fc8-9fa6-8cdad3232004",
                            TwoFactorEnabled = false,
                            UserName = "Madzix"
                        },
                        new
                        {
                            Id = "1e1a1a16-3c37-467f-ac77-e83f3061edd3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd93bfa3-c230-4611-a97c-66db08cc225b",
                            Email = "w.wrak@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "W.WRAK@GMAIL.COM",
                            NormalizedUserName = "WERCIA",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ0QTrr3tq3xGFb8CGKPjNfYzgz5IV2IPoPxMv2DmrsFalgEABfjcyuGCED7nVVUnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a76a077-8ead-4489-a5c4-099d8fc08495",
                            TwoFactorEnabled = false,
                            UserName = "Wercia"
                        },
                        new
                        {
                            Id = "1fe1d8b9-40b4-4d21-9ec3-747b25fe0316",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70d51279-8a9c-4dff-b8d8-4b9501b6ceff",
                            Email = "marcinp@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARCINP@GMAIL.COM",
                            NormalizedUserName = "PANMARCIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEKXzNCkvltlpuxKRh44zsGL0BhcQSN1YKY91Xr+rReWu1jNL4eR9TNdN/RqOmEpASQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5aaed874-ddd5-4ca1-9e5f-141888e72582",
                            TwoFactorEnabled = false,
                            UserName = "PanMarcin"
                        },
                        new
                        {
                            Id = "fb5fad4f-130e-439a-a74d-e75432c8a5d7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "321d9d02-d042-47b7-9642-6c812f9e502e",
                            Email = "znawca@gamil.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ZNAWCA@GAMIL.COM",
                            NormalizedUserName = "ZNAWCA",
                            PasswordHash = "AQAAAAEAACcQAAAAEDl5dbRzWQJRxxR9xb+yizUQy2R1snR56uTlfuSynZuepIL59lOcvX+iin17lQU+QA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57dd3824-214f-4d84-be18-6e18ced29983",
                            TwoFactorEnabled = false,
                            UserName = "Znawca"
                        },
                        new
                        {
                            Id = "bdf0715a-053f-4d3a-85e5-8013f853107e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c883a3a-a9e9-49b9-aff5-3455c87d64be",
                            Email = "mirkow@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MIRKOW@GMAIL.COM",
                            NormalizedUserName = "MIREK123",
                            PasswordHash = "AQAAAAEAACcQAAAAEJy1DVTKjXrlq2AszPFr6WHfVXkDESKa33WWP5L54VFKChptEdxzkcTIF+UdNVUg2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4d0adb5-35fa-427b-999a-4aead0ebc367",
                            TwoFactorEnabled = false,
                            UserName = "mirek123"
                        },
                        new
                        {
                            Id = "9c3d4bdf-a2eb-42f5-9b67-07facff0653d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "82e55b13-47b7-4580-8d22-234ff412d53f",
                            Email = "enowak@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ENOWAK@GMAIL.COM",
                            NormalizedUserName = "EMILKA",
                            PasswordHash = "AQAAAAEAACcQAAAAEBFMouagAuWwYuM+WVK2b3TBoI8Ty3JYJCS9j+nG4e4LhZ9YSb5WpCLmhE4cezD0tw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "31b45280-8ee9-4250-a39e-8dc3d806603b",
                            TwoFactorEnabled = false,
                            UserName = "Emilka"
                        },
                        new
                        {
                            Id = "36e158e5-3731-4976-a13f-445fe61fdddd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3591a375-879e-495c-ac16-d03e8e7bd933",
                            Email = "jk@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JK@GMAIL.COM",
                            NormalizedUserName = "JK",
                            PasswordHash = "AQAAAAEAACcQAAAAENMtz/1HJe9mFAFM+LjiGKGM2YFgWGulXt36XvWk1sUR8cdwEEekI3dBi51KBOwuHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "88125554-9ea9-48c1-b6cb-5e3a84204227",
                            TwoFactorEnabled = false,
                            UserName = "JK"
                        },
                        new
                        {
                            Id = "f2bb93f0-3f5b-4918-9462-1d5ba0059ab4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "985af9ad-a0df-43a0-969b-93c552355c87",
                            Email = "znowakowska@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ZNOWAKOWSKA@GMAIL.COM",
                            NormalizedUserName = "ZOSIAA1",
                            PasswordHash = "AQAAAAEAACcQAAAAEHeoVf+9C2CMnK5rrL+914FaZoF+IvWcO90m8q88nbgnY4vQY8ScAP9BBuv+eod9XA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f3498322-9098-4434-a7ad-52d7fdfdc8dd",
                            TwoFactorEnabled = false,
                            UserName = "Zosiaa1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "da6486af-ab27-48f0-9ad5-1a5f047cd292",
                            ConcurrencyStamp = "3311e92e-bbee-480e-b964-605873c86602",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "fdcebb1b-b431-4f4d-98ba-a986b6a4990d",
                            ConcurrencyStamp = "e584e22c-f9d7-4176-aeae-4b97f8b95bbe",
                            Name = "Default",
                            NormalizedName = "DEFAULT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "23e1a0ef-4a8a-462a-8219-1d3a1169f417",
                            RoleId = "da6486af-ab27-48f0-9ad5-1a5f047cd292"
                        },
                        new
                        {
                            UserId = "593a9e65-5f4d-40b8-91f5-1813f577ce70",
                            RoleId = "fdcebb1b-b431-4f4d-98ba-a986b6a4990d"
                        },
                        new
                        {
                            UserId = "509de9d8-a3d5-47d9-a6b2-82c13c5dd216",
                            RoleId = "fdcebb1b-b431-4f4d-98ba-a986b6a4990d"
                        },
                        new
                        {
                            UserId = "e6f1d790-fa08-4db8-8958-4d8d171193d2",
                            RoleId = "fdcebb1b-b431-4f4d-98ba-a986b6a4990d"
                        },
                        new
                        {
                            UserId = "7b2e5361-9196-49f7-aa93-9c752fd63f19",
                            RoleId = "fdcebb1b-b431-4f4d-98ba-a986b6a4990d"
                        },
                        new
                        {
                            UserId = "1e6751b3-ecd8-4835-aee7-29274771601d",
                            RoleId = "fdcebb1b-b431-4f4d-98ba-a986b6a4990d"
                        },
                        new
                        {
                            UserId = "e32bdbc1-1892-4e41-9c69-6fcf8e40635c",
                            RoleId = "fdcebb1b-b431-4f4d-98ba-a986b6a4990d"
                        },
                        new
                        {
                            UserId = "7493442e-646b-41d4-8aa8-8b764c12eb2c",
                            RoleId = "fdcebb1b-b431-4f4d-98ba-a986b6a4990d"
                        },
                        new
                        {
                            UserId = "4be99f35-6aa1-46b4-b0d0-2c0a6545a9e2",
                            RoleId = "fdcebb1b-b431-4f4d-98ba-a986b6a4990d"
                        },
                        new
                        {
                            UserId = "a6592ad5-0033-4d24-b5c7-b5ab43d81836",
                            RoleId = "fdcebb1b-b431-4f4d-98ba-a986b6a4990d"
                        },
                        new
                        {
                            UserId = "c907b3e5-3ebc-4bf0-a733-b01c75ba8d77",
                            RoleId = "fdcebb1b-b431-4f4d-98ba-a986b6a4990d"
                        },
                        new
                        {
                            UserId = "0cf44c1c-6a00-4738-b33f-b662cf98cd7e",
                            RoleId = "fdcebb1b-b431-4f4d-98ba-a986b6a4990d"
                        },
                        new
                        {
                            UserId = "1e1a1a16-3c37-467f-ac77-e83f3061edd3",
                            RoleId = "fdcebb1b-b431-4f4d-98ba-a986b6a4990d"
                        },
                        new
                        {
                            UserId = "1fe1d8b9-40b4-4d21-9ec3-747b25fe0316",
                            RoleId = "fdcebb1b-b431-4f4d-98ba-a986b6a4990d"
                        },
                        new
                        {
                            UserId = "fb5fad4f-130e-439a-a74d-e75432c8a5d7",
                            RoleId = "fdcebb1b-b431-4f4d-98ba-a986b6a4990d"
                        },
                        new
                        {
                            UserId = "bdf0715a-053f-4d3a-85e5-8013f853107e",
                            RoleId = "fdcebb1b-b431-4f4d-98ba-a986b6a4990d"
                        },
                        new
                        {
                            UserId = "9c3d4bdf-a2eb-42f5-9b67-07facff0653d",
                            RoleId = "fdcebb1b-b431-4f4d-98ba-a986b6a4990d"
                        },
                        new
                        {
                            UserId = "36e158e5-3731-4976-a13f-445fe61fdddd",
                            RoleId = "fdcebb1b-b431-4f4d-98ba-a986b6a4990d"
                        },
                        new
                        {
                            UserId = "f2bb93f0-3f5b-4918-9462-1d5ba0059ab4",
                            RoleId = "fdcebb1b-b431-4f4d-98ba-a986b6a4990d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BooksApi.Models.Book", b =>
                {
                    b.HasOne("BooksApi.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_books_authors_author_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooksApi.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .HasConstraintName("fk_books_genres_genre_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BooksApi.Models.Opinion", b =>
                {
                    b.HasOne("BooksApi.Models.Review", "Review")
                        .WithMany("ReviewOpinions")
                        .HasForeignKey("ReviewId")
                        .HasConstraintName("fk_opinions_reviews_review_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooksApi.Models.User", "User")
                        .WithMany("ReviewOpinions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_opinions_users_user_id");

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BooksApi.Models.RefreshToken", b =>
                {
                    b.HasOne("BooksApi.Models.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_refresh_tokens_users_user_id");
                });

            modelBuilder.Entity("BooksApi.Models.Review", b =>
                {
                    b.HasOne("BooksApi.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .HasConstraintName("fk_reviews_books_book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooksApi.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_reviews_users_user_id");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BooksApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BooksApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooksApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BooksApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BooksApi.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BooksApi.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BooksApi.Models.Review", b =>
                {
                    b.Navigation("ReviewOpinions");
                });

            modelBuilder.Entity("BooksApi.Models.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("ReviewOpinions");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
